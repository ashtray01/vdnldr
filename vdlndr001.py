import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import threading
import os
import sys
import re
import webbrowser
import socket
import tempfile
import shutil
from pathlib import Path
import io
import contextlib

class UniversalDownloaderApp:
    def __init__(self, root):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if self.is_already_running():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            sys.exit(1)

        self.root = root
        self.root.title("Universal Video Downloader")
        self.root.geometry("350x600")  # —à–∏—Ä–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞
        self.root.resizable(False, True)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

        # –¶–≤–µ—Ç–∞
        bg_color = "#1e1e1e"
        fg_color = "#ffffff"
        entry_bg = "#2d2d2d"
        btn_bg = "#3c3c3c"
        btn_fg = "#ffffff"

        self.style = ttk.Style()
        self.style.theme_use('clam')

        # TFrame
        self.style.configure("TFrame", background=bg_color)

        # TLabel
        self.style.configure("TLabel", background=bg_color, foreground=fg_color, font=("Arial", 9), borderwidth=0)

        # TButton
        self.style.configure("TButton",
            background=btn_bg,
            foreground=btn_fg,
            font=("Arial", 9),
            borderwidth=1,
            relief="flat"
        )
        self.style.map("TButton",
            background=[('active', '#555555')],
            foreground=[('active', 'white')]
        )

        # TEntry ‚Äî —É–±–∏—Ä–∞–µ–º –æ–±–≤–æ–¥–∫—É
        self.style.configure("TEntry",
            fieldbackground=entry_bg,
            foreground=fg_color,
            insertcolor=fg_color,
            bordercolor=entry_bg,
            lightcolor=entry_bg,
            darkcolor=entry_bg
        )

        # TCombobox ‚Äî —Å—Ç–∏–ª–∏–∑—É–µ–º –ø–æ–ª–µ (–Ω–æ –Ω–µ popup)
        self.style.configure("TCombobox",
            fieldbackground=entry_bg,
            background=btn_bg,
            foreground=fg_color,
            arrowcolor=fg_color,
            bordercolor=entry_bg,
            lightcolor=entry_bg,
            darkcolor=entry_bg,
            selectbackground=btn_bg,
            selectforeground=fg_color,
            anchor="w"
        )
        self.style.map("TCombobox",
            fieldbackground=[('readonly', entry_bg)],
            selectbackground=[('readonly', btn_bg)],
            selectforeground=[('readonly', fg_color)]
        )

        # TScrollbar
        self.style.configure("TScrollbar",
            background=btn_bg,
            troughcolor=bg_color,
            bordercolor=bg_color,
            arrowcolor=fg_color,
            gripcount=0
        )
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(root, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        ttk.Label(main_frame, text=" ‚Üê –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã").grid(row=0, column=1, sticky=tk.W, pady=(0, 3))
        self.platform_var = tk.StringVar(value="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        platforms = ["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "YouTube", "Rutube", "VK", "Odnoklassniki", "Dzen", "Vimeo", "Twitter", "Instagram", "TikTok"]
        platform_combo = ttk.Combobox(main_frame, textvariable=self.platform_var, values=platforms, width=20, state="readonly")
        platform_combo.grid(row=0, column=0, sticky=tk.W, pady=(0, 3), padx=(5, 0))
        platform_combo.bind("<<ComboboxSelected>>", self.on_platform_change)

        # –ü–æ–ª–µ –¥–ª—è URL
        ttk.Label(main_frame, text=" ").grid(row=1, column=0, sticky=tk.W, pady=(0, 2))
        self.url_entry = ttk.Entry(main_frame, width=55)
        self.url_entry.grid(row=2, column=0, columnspan=2, sticky=tk.EW, pady=(0, 6))
        self.url_entry.insert(0, "URL –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")

        self.url_entry.bind('<Button-1>', self.on_url_entry_click)
        self.url_entry.bind('<FocusIn>', self.on_url_entry_focus)

        # –ö–Ω–æ–ø–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏
        paste_frame = ttk.Frame(main_frame)
        paste_frame.grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=(0, 6))

        paste_btn = ttk.Button(paste_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_from_clipboard, width=10)
        paste_btn.pack(side=tk.LEFT, padx=(0, 5))

        clear_btn = ttk.Button(paste_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_url, width=10)
        clear_btn.pack(side=tk.LEFT)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        settings_frame = ttk.Frame(main_frame)
        settings_frame.grid(row=4, column=0, columnspan=2, sticky=tk.EW, pady=(0, 8))

        # –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        ttk.Label(settings_frame, text="–ö–∞—á–µ—Å—Ç–≤–æ:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.quality_var = tk.StringVar(value="720")
        quality_combo = ttk.Combobox(settings_frame, textvariable=self.quality_var,
                                    values=["2160 (4K)", "1440 (2K)", "1080 (Full HD)", "720 (HD)", "480", "360", "240", "–ê–≤—Ç–æ"],
                                    width=12, state="readonly")
        quality_combo.grid(row=0, column=1, sticky=tk.W)

        # –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        ttk.Label(settings_frame, text="–°–∫–æ—Ä–æ—Å—Ç—å:").grid(row=0, column=2, sticky=tk.W, padx=(8, 5))
        self.speed_var = tk.StringVar(value="5M")
        speed_combo = ttk.Combobox(settings_frame, textvariable=self.speed_var,
                                  values=["–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "10M", "5M", "2M", "1M", "500K"],
                                  width=12, state="readonly")
        speed_combo.grid(row=0, column=3, sticky=tk.W)

        # –§–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        ttk.Label(settings_frame, text="–§–æ—Ä–º–∞—Ç:").grid(row=1, column=0, sticky=tk.W, padx=(0, 5), pady=(4, 0))
        self.format_var = tk.StringVar(value="mp4")
        format_combo = ttk.Combobox(settings_frame, textvariable=self.format_var,
                                   values=["mp4", "mkv", "webm", "best", "worst"],
                                   width=12, state="readonly")
        format_combo.grid(row=1, column=1, sticky=tk.W, pady=(4, 0))

        # –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        ttk.Label(main_frame, text="–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:").grid(row=5, column=0, sticky=tk.W, pady=(4, 2))
        self.folder_var = tk.StringVar(value=os.path.join(os.path.expanduser("~"), "Downloads"))
        folder_frame = ttk.Frame(main_frame)
        folder_frame.grid(row=6, column=0, columnspan=2, sticky=tk.EW, pady=(0, 6))

        self.folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_var, width=45)
        self.folder_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

        browse_btn = ttk.Button(folder_frame, text="üìÅ", command=self.browse_folder, width=4)
        browse_btn.pack(side=tk.RIGHT, padx=(5, 0))

        # –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        ttk.Label(main_frame, text="–ò–º—è —Ñ–∞–π–ª–∞:").grid(row=7, column=0, sticky=tk.W, pady=(2, 2))
        self.name_format_var = tk.StringVar(value="%(title)s.%(ext)s")
        name_frame = ttk.Frame(main_frame)
        name_frame.grid(row=8, column=0, columnspan=2, sticky=tk.EW, pady=(0, 6))

        name_combo = ttk.Combobox(name_frame, textvariable=self.name_format_var,
                                 values=["%(title)s.%(ext)s", "%(id)s.%(ext)s", "%(upload_date)s_%(title)s.%(ext)s"],
                                 width=40, state="readonly")
        name_combo.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞)
        ttk.Label(main_frame, text="–õ–æ–≥:").grid(row=9, column=0, sticky=tk.W, pady=(2, 2))
        self.log_text = scrolledtext.ScrolledText(
            main_frame,
            wrap=tk.WORD,
            width=65,
            height=6,
            bg=entry_bg,
            fg=fg_color,
            insertbackground=fg_color,
            font=("Consolas", 8),
            relief="flat",
            highlightthickness=0,
            bd=0
        )
        self.log_text.grid(row=10, column=0, columnspan=2, sticky=tk.NSEW, pady=(0, 6))
        self.log_text.config(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=11, column=0, columnspan=2, pady=(0, 0))

        self.download_btn = ttk.Button(btn_frame, text="–°–∫–∞—á–∞—Ç—å", command=self.start_download, width=8)
        self.download_btn.pack(side=tk.LEFT, padx=3)

        self.stop_btn = ttk.Button(btn_frame, text="–°—Ç–æ–ø", command=self.stop_download, state=tk.DISABLED, width=6)
        self.stop_btn.pack(side=tk.LEFT, padx=3)

        self.clear_log_btn = ttk.Button(btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log, width=12)
        self.clear_log_btn.pack(side=tk.LEFT, padx=3)

        help_btn = ttk.Button(btn_frame, text="–ü–æ–º–æ—â—å", command=self.show_help, width=8)
        help_btn.pack(side=tk.RIGHT, padx=3)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(root, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W,
                               background="#252525", foreground="#cccccc", font=("Arial", 8))
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º
        self.download_process = None
        self.is_downloading = False
        self.is_closing = False
        self.use_python_module = False
        self.temp_dir = None

        main_frame.grid_rowconfigure(10, weight=1)
        main_frame.columnconfigure(1, weight=1)

        self.setup_environment()

    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    # (paste_from_clipboard, clear_url, on_url_entry_click, on_url_entry_focus,
    # setup_environment, setup_yt_dlp, is_already_running, on_closing,
    # cleanup, force_quit, on_platform_change, browse_folder, log_message,
    # clear_log, show_help, start_download, run_download, progress_hook,
    # stop_download, download_complete)

    # –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # (–æ–Ω–∏ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç UI –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ)

    def paste_from_clipboard(self):
        try:
            clipboard_content = self.root.clipboard_get()
            if clipboard_content.strip():
                self.url_entry.delete(0, tk.END)
                self.url_entry.insert(0, clipboard_content)
                self.log_message("[INFO] –°—Å—ã–ª–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
        except:
            self.log_message("[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")

    def clear_url(self):
        self.url_entry.delete(0, tk.END)
        self.url_entry.insert(0, "https://")
        self.url_entry.focus_set()
        self.url_entry.select_range(0, tk.END)

    def on_url_entry_click(self, event):
        if self.url_entry.get() == "https://":
            self.url_entry.select_range(0, tk.END)

    def on_url_entry_focus(self, event):
        if self.url_entry.get() == "https://":
            self.url_entry.select_range(0, tk.END)

    def setup_environment(self):
        self.log_message("[INFO] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            self.temp_dir = tempfile.mkdtemp(prefix="universal_downloader_")
            self.log_message(f"[INFO] –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {self.temp_dir}")
            self.setup_yt_dlp()
            self.log_message("[OK] –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        except Exception as e:
            self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")
            self.status_var.set("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    def setup_yt_dlp(self):
        try:
            import yt_dlp
            self.log_message("[OK] yt-dlp –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ Python")
            self.use_python_module = True
            version = yt_dlp.version.__version__
            self.log_message(f"[INFO] –í–µ—Ä—Å–∏—è yt-dlp: {version}")
        except ImportError:
            self.log_message("[ERROR] yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            self.use_python_module = False
            messagebox.showerror("–û—à–∏–±–∫–∞", "yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

    def is_already_running(self):
        try:
            lock_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            lock_socket.bind(('127.0.0.1', 47291))
            return False
        except socket.error:
            return True

    def on_closing(self):
        if self.is_downloading:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                self.is_closing = True
                self.stop_download()
                self.root.after(100, self.force_quit)
        else:
            self.cleanup()
            self.root.destroy()

    def cleanup(self):
        try:
            if self.temp_dir and os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
                self.log_message("[INFO] –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except:
            pass

    def force_quit(self):
        self.cleanup()
        self.root.destroy()

    def on_platform_change(self, event):
        platform = self.platform_var.get()
        self.log_message(f"[INFO] –í—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")

    def browse_folder(self):
        folder_selected = filedialog.askdirectory(initialdir=self.folder_var.get())
        if folder_selected:
            self.folder_var.set(folder_selected)

    def log_message(self, message):
        if self.is_closing:
            return
        self.log_text.config(state=tk.NORMAL)
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)

    def clear_log(self):
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)
        self.status_var.set("–õ–æ–≥ –æ—á–∏—â–µ–Ω")

    def show_help(self):
        help_text = """
        Universal Video Downloader - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

        1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        2. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç
        3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ñ–æ—Ä–º–∞—Ç, –ø–∞–ø–∫—É
        4. –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å"

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: YouTube, Rutube, VK, OK,
        Dzen, Vimeo, Twitter, Instagram, TikTok –∏ –¥—Ä.
        """
        messagebox.showinfo("–ü–æ–º–æ—â—å", help_text)

    def start_download(self):
        if self.is_downloading:
            return
        content_url = self.url_entry.get().strip()
        if not content_url or content_url == "https://":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
            self.url_entry.focus_set()
            return
        if not re.match(r'^https?://', content_url):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            self.url_entry.focus_set()
            self.url_entry.select_range(0, tk.END)
            return
        if not self.use_python_module:
            messagebox.showerror("–û—à–∏–±–∫–∞", "yt-dlp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            return

        output_folder = self.folder_var.get()
        if not os.path.exists(output_folder):
            try:
                os.makedirs(output_folder)
            except:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {output_folder}")
                return

        self.log_message("\n" + "="*60)
        self.log_message(f"–ù–∞—á–∞–ª–æ: {content_url}")
        self.log_message(f"–ü–∞–ø–∫–∞: {output_folder}")
        self.log_message("="*60 + "\n")

        self.download_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        self.is_downloading = True
        self.status_var.set("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...")

        threading.Thread(target=self.run_download, args=(content_url,), daemon=True).start()

    def run_download(self, content_url):
        try:
            if not self.use_python_module:
                self.log_message("[ERROR] yt-dlp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
                self.root.after(0, self.download_complete)
                return

            import yt_dlp
            output_capture = io.StringIO()

            def download_with_redirect():
                try:
                    with contextlib.redirect_stdout(output_capture):
                        with contextlib.redirect_stderr(output_capture):
                            ydl_opts = {
                                'outtmpl': os.path.join(self.folder_var.get(), self.name_format_var.get()),
                                'ignoreerrors': True,
                                'retries': 10,
                                'fragment_retries': 10,
                                'concurrent_fragments': 4,
                                'sleep_interval': 5,
                                'quiet': False,
                                'no_warnings': False,
                                'progress_hooks': [self.progress_hook],
                            }

                            if self.format_var.get() != 'best':
                                ydl_opts['merge_output_format'] = self.format_var.get()
                                ydl_opts['format'] = f'bestvideo[ext={self.format_var.get()}]+bestaudio[ext=m4a]/best'

                            quality = self.quality_var.get().split()[0] if self.quality_var.get() != "–ê–≤—Ç–æ" else "best"
                            if quality != "best":
                                ydl_opts['format'] = f'bestvideo[height<={quality}]+bestaudio/best[height<={quality}]'

                            speed_limit = self.speed_var.get()
                            if speed_limit != "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
                                if 'M' in speed_limit:
                                    rate_limit = int(speed_limit.replace('M', '')) * 1000000
                                elif 'K' in speed_limit:
                                    rate_limit = int(speed_limit.replace('K', '')) * 1000
                                else:
                                    rate_limit = int(speed_limit)
                                ydl_opts['ratelimit'] = rate_limit

                            if any(x in content_url for x in ["/playlist/", "/plst/", "list="]):
                                ydl_opts['outtmpl'] = os.path.join(
                                    self.folder_var.get(), 
                                    '%(playlist_title)s', 
                                    self.name_format_var.get()
                                )

                            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                                ydl.download([content_url])
                except Exception as e:
                    output_capture.write(f"\n[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n")
                    import traceback
                    output_capture.write(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}\n")
                finally:
                    if not self.is_closing:
                        self.root.after(0, self.download_complete)

            download_thread = threading.Thread(target=download_with_redirect, daemon=True)
            download_thread.start()

            while self.is_downloading and not self.is_closing and download_thread.is_alive():
                try:
                    output = output_capture.getvalue()
                    if output:
                        lines = output.split('\n')
                        for line in lines:
                            if line.strip() and not self.is_closing:
                                self.root.after(0, self.log_message, line.strip())
                        output_capture.seek(0)
                        output_capture.truncate(0)
                except Exception as e:
                    self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: {str(e)}")
                threading.Event().wait(0.5)

        except Exception as e:
            if not self.is_closing:
                self.log_message(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
                self.root.after(0, self.download_complete)

    def progress_hook(self, d):
        if d['status'] == 'downloading':
            percent = d.get('_percent_str', 'N/A')
            speed = d.get('_speed_str', 'N/A')
            eta = d.get('_eta_str', 'N/A')
            self.status_var.set(f"–ó–∞–≥—Ä—É–∑–∫–∞: {percent} | –°–∫–æ—Ä–æ—Å—Ç—å: {speed} | –û—Å—Ç–∞–ª–æ—Å—å: {eta}")
        elif d['status'] == 'finished':
            self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...")

    def stop_download(self):
        if self.is_downloading:
            self.log_message("\n[STOP] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.status_var.set("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.is_downloading = False
            self.download_complete()

    def download_complete(self):
        self.is_downloading = False
        self.download_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

if __name__ == "__main__":
    root = tk.Tk()
    app = UniversalDownloaderApp(root)
    root.mainloop()